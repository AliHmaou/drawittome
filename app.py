import zlib
import base64
import duckdb as ddb
import ast
import gradio as gr
import io
import requests
from PIL import Image
from doc import getDoc

def duckdb_init_secrets(api_key="", model="qwen-2.5-coder-32b"):
    #ddb.connect("./data/memory.duckdb")
    ddb.execute("INSTALL FLOCKMTL FROM community")
    ddb.execute("LOAD FLOCKMTL")
    try:
        ddb.execute(f"""
                        CREATE SECRET groq (
                            TYPE OPENAI,
                            BASE_URL 'https://api.groq.com/openai/v1/',
                            API_KEY '{api_key}'
                        );  
                        """)
    except:
        print("secret already set")
    ddb.sql("""DELETE MODEL 'mermaid_generator';
            """)
    ddb.execute("""
                    CREATE MODEL(
                        'mermaid_generator',
                        '"""+model+"""',
                        'openai',
                        {"context_window": 128000, "max_output_tokens": 32000}
                    );  
                """)
    return "‚úÖ Configuration r√©ussie! Secret temporaire activ√©.", model

def duckdb_init_prompt(prompt="", precisions=""):
    if prompt=="":
        prompt="""G√©n√®re le code mermaid, et rien que le code dans le champ json "mermaid_code", expliquant le mieux la description qui suit.
                    Fais en sorte que les noms des entit√©s mermaid soient concis.
                    Evite les caract√®res qui feraient bugger le script mermaid : **√©vite les parenth√®ses () si tu veux pr√©ciser**
                    Dans le champ mermaid_diag_type tu vas indiquer le type de diagramme selon la pertinence d√©finie ci-apr√®s.
                    Voici la liste des types de diagrammes avec un rappel de la pertinence :
                    - Graph TB : choix par d√©faut, essaie de regrouper par blocs, mets des couleurs ;
                    - flowchart TD : pour les processus et arbres de d√©cisions ;
                    - sequenceDiagram : pour les processus complexes ;
                    - classDiagram : si demande explicite ou entrants techniques comme un sch√©ma sql ;
                    - stateDiagram-v2 : si demande explicite ou entrants techniques comme une user story ;
                    - erDiagram : choix par d√©faut, essaie de regrouper par blocs, mets des couleurs ;
                    - gantt : si th√©matique projet ou travaux avec des t√¢ches identifiables ;
                    - timeline : si chronologie, historique, biographie, regroupe par d√©cennie, ou siecle si n√©cessaire pour limiter √† 10 colonnes. (syntaxe : timeline    title History of Social Media Platform    2002 : LinkedIn    2004 : Facebook         : Google    2005 : YouTube    2006 : Twitter)
                Le sch√©ma est dans la langue exprim√©e par le demandeur ou dans la langue du texte d origine.
                """

    ddb.execute("""DELETE PROMPT 'mermaid_generator_prompt';
                """)
    ddb.execute(f"""CREATE PROMPT('mermaid_generator_prompt', '{prompt}. Pr√©cisions utilisateur importantes : {precisions}.')
                """)
    return "‚úÖ Prompt configur√© avec succ√®s"


def duckdb_code_from_text(input_text="A car got repaired but hit a tree and got wrecked again."):
    query = """
    with llm_result as (
        select 
        llm_complete_json(
            {'model_name': 'mermaid_generator','secret_name': 'groq' }, 
            {'prompt_name': 'mermaid_generator_prompt', 'version': 1}, 
            {'prompt_input': ?}
        )::json AS json_result
    ) 
    select json_result.mermaid_code, json_result.mermaid_diag_type from llm_result
    """
    res = ddb.execute(query, [input_text]).fetchdf()
    mermaid_code = ast.literal_eval(res["mermaid_code"][0])
    mermaid_type = ast.literal_eval(res["mermaid_diag_type"][0])
    return mermaid_code, mermaid_type


def kroki_img_from_mermaid(mermaid_code: str, output_format: str = "svg") -> str:
    compressed = zlib.compress(mermaid_code.encode('utf-8'))
    b64 = base64.urlsafe_b64encode(compressed).decode('utf-8')
    image_url = f"https://kroki.io/mermaid/{output_format}/{b64}"
    html_img = f"""<a href="{image_url}" target="_blank"> <img src="{image_url}" alt="Diagramme Mermaid via Kroki" > </a>"""
    return html_img


def generate_diagram(text_input, additional_details_input):
    duckdb_init_prompt(precisions=additional_details_input)
    mermaid_code, mermaid_diag_type = duckdb_code_from_text(input_text=text_input)
    kroki_html = kroki_img_from_mermaid(mermaid_code)
    return gr.Markdown(kroki_html), gr.Markdown(value=mermaid_code), f"üìä **Type**: {mermaid_diag_type}", gr.Markdown(value=kroki_html)

css = """
.app-header {
    text-align: center;
    margin-bottom: 10px;
}
.app-title {
    font-size: 2.5em !important;
    font-weight: bold !important;
    margin: 10px 0 !important;
}
.app-subtitle {
    font-size: 1.1em !important;
    margin-bottom: 20px !important;
    color: #555;
}
.footer {
    text-align: center;
    margin-top: 20px;
    color: #666;
    font-size: 0.9em;
}
"""

with gr.Blocks(css=css, theme="soft") as demo:
    gr.HTML("""
        <div class="app-header">
            <h1 class="app-title">üé® DrawItToMe</h1>
            <p class="app-subtitle">Parcequ'un sch√©ma vaut mieux qu'un long discours.</p>
        </div>
    """)
    
    with gr.Row():
        with gr.Column(scale=1):
            text_input = gr.Textbox(
                label="üìù Description du diagramme", 
                placeholder="D√©crivez le diagramme que vous souhaitez g√©n√©rer... Par exemple : 'Un processus d'achat en ligne avec panier, paiement et livraison'",
                lines=15
            )
            additional_details_input = gr.Textbox(
                label="üîç Pr√©cisions suppl√©mentaires", 
                placeholder="Pr√©cisez le type de diagramme souhait√© ou ajoutez des d√©tails (optionnel)"
            )
            
            with gr.Row():
                generate_button = gr.Button("‚ú® G√©n√©rer le diagramme", variant="primary")
                clear_button = gr.Button("üóëÔ∏è Effacer", variant="secondary")
            
        with gr.Column(scale=4):
            with gr.Tab(label="üìä Diagramme"):
                image_output = gr.Markdown(
                    label="Visualisation", 
                    container=True, 
                    min_height=400, 
                    show_copy_button=True, 
                    show_label=True
                )
                gr.HTML("<p><i>Cliquez sur l'image pour l'ouvrir en plein √©cran</i></p>")
                
            with gr.Tab(label="üíª Code"):
                mermaid_code = gr.Code(
                    label="Code Mermaid g√©n√©r√©", 
                    language="markdown"
                )
                mermaid_diag_type = gr.Markdown(
                    label="Type de diagramme",
                    container=True
                )
                mermaid_link = gr.Markdown(
                    label="Lien direct",
                    container=True
                )
                
            with gr.Tab(label="‚öôÔ∏è Configuration"):
                gr.HTML("<h3>Configuration de l'API</h3>")
                groq_secret = gr.Text(
                    label="üîë Cl√© API Groq", 
                    placeholder="Entrez votre cl√© API Groq"
                )
                gr.HTML("<p><i>Obtenez une cl√© gratuite sur <a href='https://groq.com/' target='_blank'>groq.com</a></i></p>")
                
                groq_model = gr.Text(
                    label="ü§ñ Mod√®le Groq", 
                    value="qwen-qwq-32b",
                    placeholder="Nom du mod√®le √† utiliser"
                )
                gr.HTML("<p><i>Consultez les mod√®les disponibles sur <a href='https://console.groq.com/docs/models' target='_blank'>console.groq.com/docs/models</a></i></p>")
                
                groq_secret_button = gr.Button("üíæ Enregistrer la configuration", variant="primary")
            with gr.Tab(label="‚úçüèΩ Coder's notes"):
                gr.Markdown(value=getDoc())
    with gr.Row():
        with gr.Column():
            gr.HTML("<h3>Exemples de descriptions pour vous inspirer</h3>")
            gr.Examples(
                examples=[
                    ["Une voiture a un moteur et 4 roues", 
                    "Diagramme de classe"],
                    ["Lorsqu'un service public r√©gulier ou √† la demande de transport routier est situ√© pour la plus grande partie de son parcours en Ile-de-France, et avec l'accord pr√©alable des autorit√©s organisatrices int√©ress√©es par la partie du service ext√©rieure √† la r√©gion, le syndicat peut inscrire l'ensemble du service au plan r√©gional de transport.", 
                    "Diagramme de s√©quence"],
                    [""" Le projet date de 1989, ann√©e o√π le gouvernement de Michel Rocard cherche √† r√©soudre le probl√®me de la saturation de la ligne A du RER. La SNCF pr√©sentera le projet EOLE (la ligne E du RER) et la RATP le projet Meteor (ligne 14). Le projet initial devait relier la Porte Maillot √† l'ouest √† la Porte d'Ivry √† l'est. Finalement le projet est pour des raisons de co√ªt limit√© √† l'ouest √† Saint-Lazare et √† l'est √† Biblioth√®que Fran√ßois-Mitterrand. Un atelier souterrain est pr√©vu pour √™tre transform√© plus tard en station. Dans un premier temps la ligne est limit√©e √† Madeleine.
    Un MP14
    Les travaux d√©butent alors √† la fin de 1989 et le tunnel commence √† √™tre creus√© en 1993. Le tron√ßon entre gare de Lyon et Cour Saint Emillion est √©difi√© √† ciel ouvert afin de r√©duire les coups de construction. Le passage sous la seine est construit gr√¢ce √† la traditionnelle m√©thode des caissons immerg√©s.
    La ligne est inaugur√©e en octobre 1998 et relie la station Madeleine (8√®me arrondissement) √† la station Biblioth√®que Fran√ßois-Mitterrand dans le 13√®me. En 2003, la ligne est prolong√©e de Madeleine √† la gare Saint-Lazare. Elle est prolong√©e de la Biblioth√®que aux Olympiades en 2007 en r√©utilisant l'atelier souterrain un autre atelier √©tant construit plus loin.
    La fr√©quentation de la ligne de cesse de cro√Ætre. Elle fait dor√©navant partie du projet du Grand Paris Express, La ligne est donc prolong√©e en juin 2024 de Saint-Ouen √† Saint-Denis au nord et de Olympiades √† l'a√©roport d'Orly au sud.
    Le 12 octobre 2020, la ligne 14 a re√ßu les nouvelles rames de m√©tro pneumatique : le MP14 aux couleurs d'√éle-de-France Mobilit√©s. Ces nouvelles rames comptent 8 voitures contre 6 pour les anciens MP89 CA et MP05. Cette augmentation de la taille des rames est due √† l'augmentation brutale du trafic attendue en raison du prolongement √† l'a√©roport d'Orly.""", 
                    "Diagramme de Gantt"],
                    ["""Historique
    Comit√© des transports parisiens
    √éle-de-France Mobilit√©s est l'h√©riti√®re de plusieurs formes d'organisations charg√©es des transports parisiens depuis les ann√©es 1930. En 1938, un d√©cret-loi cr√©e le Comit√© des transports parisiens, avec une majorit√© de repr√©sentants de l'√âtat. Cet organisme avait pour mission de coordonner les transports collectifs en r√©gion parisienne.
    Office r√©gional des transports parisiens
    En 1948, une r√©organisation cr√©e la R√©gie autonome des transports parisiens (RATP) et l'Office r√©gional des transports parisiens (ORTP), qui remplace le Comit√©. Le d√©cret du 14 novembre 1949 √©tablit les bases de l'organisation des transports toujours en vigueur : l'√âtat finance le d√©ficit de la SNCF, tandis que les collectivit√©s locales subventionnent la RATP.
    Syndicat des transports parisiens (STP)
    En 1959, l'ORTP devient le Syndicat des transports parisiens (STP), un √©tablissement public regroupant l'√âtat, la mairie de Paris et plusieurs d√©partements. Son r√¥le est de moderniser les transports en commun et de coordonner l'ensemble des acteurs : la RATP, la SNCF et de nombreuses entreprises priv√©es. Le STP supervise les investissements, les projets d'am√©nagement et les actions pour am√©liorer la qualit√© de service.""", 
                    "Timeline"],
                    ["Processus d'inscription √† un service en ligne : l'utilisateur s'inscrit, re√ßoit un email de confirmation, active son compte, configure son profil et peut ensuite utiliser le service", 
                    "Organigramme (flowchart)"]
                ],
                inputs=[text_input, additional_details_input],
                label="Exemples pr√™ts √† l'emploi"
            )

            
    
    gr.HTML("""
        <div class="footer">
            <p>DrawItToMe utilise <a href="https://kroki.io" target="_blank">Kroki.io</a> pour le rendu des diagrammes Mermaid | 
            Propuls√© par Groq et DuckDB/FlockMTL</p>
        </div>
    """)
    
    # Event handlers
    additional_details_input.submit(
        fn=generate_diagram,
        inputs=[text_input, additional_details_input],
        outputs=[image_output, mermaid_code, mermaid_diag_type, mermaid_link]
    )
    
    text_input.submit(
        fn=generate_diagram,
        inputs=[text_input, additional_details_input],
        outputs=[image_output, mermaid_code, mermaid_diag_type, mermaid_link]
    )
    
    generate_button.click(
        fn=generate_diagram,
        inputs=[text_input, additional_details_input],
        outputs=[image_output, mermaid_code, mermaid_diag_type, mermaid_link]
    )
    
    clear_button.click(
        fn=lambda: ("", ""),
        inputs=[],
        outputs=[text_input, additional_details_input]
    )
    
    groq_secret_button.click(
        fn=duckdb_init_secrets,
        inputs=[groq_secret, groq_model],
        outputs=[groq_secret, groq_model]
    )

# Launch the interface
if __name__ == "__main__":
    demo.launch(show_error=True)